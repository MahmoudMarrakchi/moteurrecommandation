import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
import warnings
import locale

# Essayer de d√©finir la locale en fran√ßais (pour les dates et nombres)
try:
    locale.setlocale(locale.LC_ALL, 'fr_FR.UTF-8')
except:
    try:
        locale.setlocale(locale.LC_ALL, 'fr_FR')
    except:
        pass  # En cas d'√©chec, continuer avec la locale par d√©faut

# Configuration de la page
st.set_page_config(
    page_title="Analyse d'Engagement Utilisateur",
    page_icon="üìä",
    layout="wide"
)

# Supprimer les avertissements sp√©cifiques sur les op√©rations en virgule flottante
warnings.filterwarnings('ignore', category=RuntimeWarning)

# Titre et description
st.title("Tableau de Bord d'Analyse d'Engagement Utilisateur")
st.markdown("""
Cette application analyse les donn√©es d'engagement des utilisateurs pour identifier des segments, 
pr√©dire l'attrition et g√©n√©rer des recommandations personnalis√©es pour diff√©rents groupes d'utilisateurs.
""")

# T√©l√©chargement de fichier
uploaded_file = st.sidebar.file_uploader("T√©l√©charger CSV d'Engagement Utilisateur", type=["csv"])

# Charger les donn√©es
@st.cache_data
def load_data(file):
    if file is not None:
        data = pd.read_csv(file)
        return data
    else:
        # Utiliser des donn√©es d'exemple si aucun fichier n'est t√©l√©charg√©
        st.sidebar.info("Utilisation des donn√©es d'exemple. T√©l√©chargez votre propre CSV pour une analyse personnalis√©e.")
        # Essayer de charger le fichier par d√©faut si disponible
        try:
            return pd.read_csv("user_engagement.csv")
        except FileNotFoundError:
            st.error("Fichier de donn√©es d'exemple introuvable. Veuillez t√©l√©charger vos donn√©es.")
            return None

user_engagement = load_data(uploaded_file)

# Fonction pour attribuer des noms significatifs aux clusters
def nommer_clusters(df, kmeans_model):
    # Obtenir les centres des clusters
    cluster_centers = kmeans_model.cluster_centers_
    
    # Cr√©er un dictionnaire pour stocker les caract√©ristiques dominantes de chaque cluster
    caracteristiques_clusters = {}
    
    # D√©terminer la caract√©ristique dominante pour chaque cluster
    for i in range(len(cluster_centers)):
        # Trouver l'index de la valeur la plus √©lev√©e dans le centre du cluster
        dominant_feature_idx = np.argmax(cluster_centers[i])
        
        # Mapper √† l'attribut correspondant
        features = ['frequency_score', 'interaction_score', 'loyalty_score', 'recency_score', 'engagement_score']
        dominant_feature = features[dominant_feature_idx]
        
        # D√©terminer le nom du segment en fonction des caract√©ristiques
        if dominant_feature == 'recency_score' and cluster_centers[i][dominant_feature_idx] > 0.6:
            nom = "Utilisateurs Actifs R√©cemment"
        elif dominant_feature == 'frequency_score' and cluster_centers[i][dominant_feature_idx] > 0.6:
            nom = "Utilisateurs Fr√©quents"
        elif dominant_feature == 'loyalty_score' and cluster_centers[i][dominant_feature_idx] > 0.6:
            nom = "Utilisateurs Fid√®les"
        elif dominant_feature == 'engagement_score' and cluster_centers[i][dominant_feature_idx] > 0.6:
            nom = "Utilisateurs Tr√®s Engag√©s"
        elif dominant_feature == 'interaction_score' and cluster_centers[i][dominant_feature_idx] > 0.6:
            nom = "Utilisateurs Interactifs"
        else:
            # Si aucune caract√©ristique n'est particuli√®rement √©lev√©e
            if np.mean(cluster_centers[i]) < 0.3:
                nom = "Utilisateurs Peu Engag√©s"
            else:
                nom = f"Segment {i+1}"
        
        caracteristiques_clusters[i] = nom
    
    # Cr√©er un mapping des clusters num√©riques aux noms
    cluster_mapping = {i: nom for i, nom in caracteristiques_clusters.items()}
    
    # Appliquer le mapping pour cr√©er une nouvelle colonne avec les noms des clusters
    df['nom_cluster'] = df['cluster'].map(cluster_mapping)
    
    return df, cluster_mapping

if user_engagement is not None:
    # Afficher les donn√©es brutes dans une section extensible
    with st.expander("Voir les Donn√©es Brutes"):
        st.dataframe(user_engagement)
    
    # Contr√¥les de la barre lat√©rale
    st.sidebar.header("Param√®tres d'Analyse")
    
    # Permettre √† l'utilisateur d'ajuster les seuils de segmentation
    recency_threshold = st.sidebar.slider(
        "Seuil de Score de R√©cence", 
        min_value=0.0, 
        max_value=1.0, 
        value=0.7,
        help="Des valeurs plus √©lev√©es signifient que les utilisateurs doivent avoir visit√© plus r√©cemment pour √™tre consid√©r√©s comme 'actifs'"
    )
    
    frequency_threshold = st.sidebar.slider(
        "Seuil de Score de Fr√©quence", 
        min_value=0.0, 
        max_value=1.0, 
        value=user_engagement['frequency_score'].median(),
        help="Des valeurs plus √©lev√©es signifient que les utilisateurs ont besoin d'interactions plus fr√©quentes pour √™tre consid√©r√©s comme 'actifs'"
    )
    
    churn_days = st.sidebar.slider(
        "D√©finition de l'Attrition (Jours d'Inactivit√©)", 
        min_value=1, 
        max_value=30, 
        value=8,
        help="Nombre de jours d'inactivit√© pour √™tre consid√©r√© comme perdu"
    )
    
    cluster_count = st.sidebar.slider(
        "Nombre de Clusters d'Utilisateurs", 
        min_value=2, 
        max_value=10, 
        value=5
    )
    
    # Analyse principale
    st.header("Segmentation des Utilisateurs")
    col1, col2 = st.columns(2)
    
    with col1:
        # Cr√©er des segments RFM
        user_engagement['segment'] = 'Inconnu'
        user_engagement.loc[(user_engagement['recency_score'] >= recency_threshold) & 
                          (user_engagement['frequency_score'] >= frequency_threshold), 'segment'] = 'Haute Valeur'
        user_engagement.loc[(user_engagement['recency_score'] < recency_threshold) & 
                          (user_engagement['frequency_score'] >= frequency_threshold), 'segment'] = '√Ä Risque'
        user_engagement.loc[(user_engagement['recency_score'] >= recency_threshold) & 
                          (user_engagement['frequency_score'] < frequency_threshold), 'segment'] = 'Nouveau/Potentiel'
        user_engagement.loc[(user_engagement['recency_score'] < recency_threshold) & 
                          (user_engagement['frequency_score'] < frequency_threshold), 'segment'] = 'Dormant'
        
        # Afficher les comptages par segment
        segment_counts = user_engagement['segment'].value_counts().reset_index()
        segment_counts.columns = ['Segment', 'Nombre']
        st.write("Distribution des Segments d'Utilisateurs")
        st.dataframe(segment_counts)
        
        # Cr√©er un graphique en camembert pour les segments
        fig, ax = plt.subplots(figsize=(8, 8))
        ax.pie(segment_counts['Nombre'], labels=segment_counts['Segment'], autopct='%1.1f%%',
               colors=sns.color_palette('viridis', n_colors=len(segment_counts)))
        ax.set_title('Distribution des Segments d\'Utilisateurs')
        st.pyplot(fig)
    
    with col2:
        # Graphique de segmentation R√©cence-Fr√©quence
        fig, ax = plt.subplots(figsize=(10, 8))
        sns.scatterplot(x='recency_score', y='frequency_score', hue='segment', 
                        data=user_engagement, palette='viridis', s=100, alpha=0.7, ax=ax)
        
        # Ajouter les lignes de quadrant
        ax.axvline(x=recency_threshold, color='gray', linestyle='--', alpha=0.5)
        ax.axhline(y=frequency_threshold, color='gray', linestyle='--', alpha=0.5)
        
        # Ajouter les √©tiquettes de segment
        ax.annotate('Haute Valeur', xy=(0.75, 0.75), xycoords='axes fraction', fontsize=14)
        ax.annotate('Nouveau/Potentiel', xy=(0.75, 0.25), xycoords='axes fraction', fontsize=14)
        ax.annotate('√Ä Risque', xy=(0.25, 0.75), xycoords='axes fraction', fontsize=14)
        ax.annotate('Dormant', xy=(0.25, 0.25), xycoords='axes fraction', fontsize=14)
        
        ax.set_title('Segmentation des Utilisateurs par R√©cence et Fr√©quence', fontsize=16)
        ax.set_xlabel('Score de R√©cence (plus √©lev√© = plus r√©cent)', fontsize=14)
        ax.set_ylabel('Score de Fr√©quence (plus √©lev√© = plus fr√©quent)', fontsize=14)
        st.pyplot(fig)
    
    # Analyse de Cluster
    st.header("Clustering Avanc√© des Utilisateurs")
    
    # Pr√©parer les donn√©es pour le clustering
    clustering_features = ['frequency_score', 'interaction_score', 
                         'loyalty_score', 'recency_score', 'engagement_score']
    
    feature_names_fr = {
        'frequency_score': 'Score de Fr√©quence',
        'interaction_score': 'Score d\'Interaction',
        'loyalty_score': 'Score de Fid√©lit√©',
        'recency_score': 'Score de R√©cence',
        'engagement_score': 'Score d\'Engagement'
    }
    
    X = user_engagement[clustering_features].fillna(0)
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    
    # Appliquer le clustering K-means
    kmeans = KMeans(n_clusters=cluster_count, random_state=0)
    user_engagement['cluster'] = kmeans.fit_predict(X_scaled)
    
    # Nommer les clusters
    user_engagement, cluster_mapping = nommer_clusters(user_engagement, kmeans)
    
    # Visualiser les clusters avec PCA
    pca = PCA(n_components=2)
    X_pca = pca.fit_transform(X_scaled)
    
    # Tracer les clusters
    fig, ax = plt.subplots(figsize=(12, 8))
    scatter = ax.scatter(X_pca[:, 0], X_pca[:, 1], c=user_engagement['cluster'], 
                         cmap='viridis', s=50, alpha=0.7)
    plt.colorbar(scatter, label='Cluster')
    ax.set_title('Visualisation des Segments Utilisateurs (ACP)', fontsize=15)
    ax.set_xlabel('Composante Principale 1', fontsize=12)
    ax.set_ylabel('Composante Principale 2', fontsize=12)
    
    # Ajouter des annotations pour les noms des clusters
    cluster_centers_pca = pca.transform(kmeans.cluster_centers_)
    for i, (x, y) in enumerate(cluster_centers_pca):
        ax.annotate(
            cluster_mapping[i], 
            (x, y),
            fontsize=12,
            ha='center',
            va='center',
            bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="gray", alpha=0.8)
        )
    
    st.pyplot(fig)
    
    # Afficher les profils de cluster
    st.subheader("Profils des Clusters")
    
    # Cr√©er un DataFrame avec les profils moyens des clusters
    cluster_profiles = user_engagement.groupby('nom_cluster')[clustering_features].mean().reset_index()
    
    # Renommer les colonnes pour l'affichage en fran√ßais
    cluster_profiles_fr = cluster_profiles.copy()
    cluster_profiles_fr.columns = ['Nom du Cluster'] + [feature_names_fr[col] for col in clustering_features]
    
    st.dataframe(cluster_profiles_fr)
    
    # Graphique radar pour la comparaison des clusters
    st.subheader("Comparaison des Clusters")
    
    # Pr√©parer les donn√©es pour le graphique radar
    cluster_profiles_norm = cluster_profiles.copy()
    for feature in clustering_features:
        min_val = cluster_profiles[feature].min()
        max_val = cluster_profiles[feature].max()
        cluster_profiles_norm[feature] = (cluster_profiles[feature] - min_val) / (max_val - min_val)
    
    # S√©lectionner le cluster √† visualiser
    selected_cluster_name = st.selectbox("S√©lectionner un Cluster √† Visualiser", 
                                        options=sorted(user_engagement['nom_cluster'].unique()))
    
    # Obtenir l'ID du cluster √† partir du nom
    selected_cluster = None
    for cluster_id, name in cluster_mapping.items():
        if name == selected_cluster_name:
            selected_cluster = cluster_id
            break
    
    if selected_cluster is not None:
        # Cr√©er un graphique radar
        fig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True))
        
        # Nombre de variables
        categories = clustering_features
        categories_fr = [feature_names_fr[cat] for cat in categories]
        N = len(categories)
        
        # Cr√©er des angles pour chaque caract√©ristique
        angles = [n / float(N) * 2 * np.pi for n in range(N)]
        angles += angles[:1]  # Fermer la boucle
        
        # Obtenir les donn√©es pour le cluster s√©lectionn√©
        cluster_row = cluster_profiles_norm[cluster_profiles_norm['nom_cluster'] == selected_cluster_name]
        if not cluster_row.empty:
            values = cluster_row[categories].values.flatten().tolist()
            values += values[:1]  # Fermer la boucle
            
            # Dessiner le graphique
            ax.plot(angles, values, linewidth=2, linestyle='solid')
            ax.fill(angles, values, alpha=0.1)
            
            # D√©finir les √©tiquettes
            plt.xticks(angles[:-1], categories_fr, size=12)
            
            # D√©finir les graduations y
            ax.set_yticks([0.25, 0.5, 0.75])
            ax.set_yticklabels(['0.25', '0.5', '0.75'])
            
            ax.set_title(f"Profil pour le Cluster: {selected_cluster_name}", size=15)
            st.pyplot(fig)


    st.header("Analyse des Niveaux d'Engagement")

    # Cr√©er les niveaux d'engagement
    try:
        user_engagement['niveau_engagement'] = pd.qcut(
            user_engagement['engagement_score'], 
            q=5, 
            labels=['Tr√®s Faible', 'Faible', 'Moyen', '√âlev√©', 'Tr√®s √âlev√©'],
            duplicates='drop'  # Gestion des valeurs de limite dupliqu√©es
        )
    except:
        # Approche alternative si la m√©thode ci-dessus √©choue
        user_engagement['niveau_engagement'] = pd.cut(
            user_engagement['engagement_score'],
            bins=5,
            labels=['Tr√®s Faible', 'Faible', 'Moyen', '√âlev√©', 'Tr√®s √âlev√©']
        )

    # Afficher la distribution des niveaux d'engagement
    st.subheader("Distribution des Niveaux d'Engagement")
    engagement_counts = user_engagement['niveau_engagement'].value_counts().sort_index()

    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(x=engagement_counts.index, y=engagement_counts.values, ax=ax)
    ax.set_title("Distribution des Niveaux d'Engagement", fontsize=15)
    ax.set_xlabel("Niveau d'Engagement")
    ax.set_ylabel("Nombre d'Utilisateurs")
    st.pyplot(fig)

    # Cr√©er la matrice de recommandation
    st.subheader("Matrice Segment vs Niveau d'Engagement")
    engagement_rec_matrix = pd.crosstab(user_engagement['niveau_engagement'], 
                                    user_engagement['segment'])

    fig, ax = plt.subplots(figsize=(12, 8))
    sns.heatmap(engagement_rec_matrix, annot=True, cmap='YlGnBu', fmt='d', ax=ax)
    ax.set_title('Matrice Niveau d\'Engagement vs Segment', fontsize=15)
    ax.set_ylabel('Niveau d\'Engagement')
    ax.set_xlabel('Segment Utilisateur')
    plt.tight_layout()
    st.pyplot(fig)

    
    
    # Analyse d'Attrition
    st.header("Pr√©diction d'Attrition")
    
    # D√©finir "attrition" comme les utilisateurs qui ne sont pas revenus depuis X jours
    user_engagement['attrition'] = user_engagement['days_since_last_activity'] > churn_days
    
    # Afficher le taux d'attrition
    churn_rate = user_engagement['attrition'].mean() * 100
    st.metric("Taux d'Attrition Global", f"{churn_rate:.1f}%")
    
    # Attrition par segment
    st.subheader("Attrition par Segment")
    churn_by_segment = user_engagement.groupby('segment')['attrition'].mean().reset_index()
    churn_by_segment['pourcentage_attrition'] = churn_by_segment['attrition'] * 100
    churn_by_segment.columns = ['Segment', 'Attrition', 'Pourcentage d\'Attrition']
    
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(x='Segment', y='Pourcentage d\'Attrition', data=churn_by_segment, ax=ax)
    ax.set_xlabel('Segment')
    ax.set_ylabel('Taux d\'Attrition (%)')
    ax.set_title('Taux d\'Attrition par Segment d\'Utilisateur')
    st.pyplot(fig)
    
    # Attrition par cluster nomm√©
    st.subheader("Attrition par Cluster")
    churn_by_cluster = user_engagement.groupby('nom_cluster')['attrition'].mean().reset_index()
    churn_by_cluster['pourcentage_attrition'] = churn_by_cluster['attrition'] * 100
    churn_by_cluster.columns = ['Cluster', 'Attrition', 'Pourcentage d\'Attrition']
    
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(x='Cluster', y='Pourcentage d\'Attrition', data=churn_by_cluster, ax=ax)
    ax.set_xlabel('Cluster')
    ax.set_ylabel('Taux d\'Attrition (%)')
    ax.set_title('Taux d\'Attrition par Cluster d\'Utilisateur')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    st.pyplot(fig)
    
    # Former le mod√®le de pr√©diction d'attrition
    if st.button("Former le Mod√®le de Pr√©diction d'Attrition"):
        with st.spinner("Formation du mod√®le en cours..."):
            X = user_engagement[clustering_features]
            y = user_engagement['attrition']
            
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)
            
            # Former le mod√®le
            rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
            rf_model.fit(X_train, y_train)
            
            # √âvaluer
            y_pred = rf_model.predict(X_test)
            report = classification_report(y_test, y_pred, output_dict=True)
            
            # Afficher les m√©triques
            st.subheader("Performance du Mod√®le")
            col1, col2, col3 = st.columns(3)
            col1.metric("Pr√©cision", f"{report['accuracy']:.2f}")
            col2.metric("Pr√©cision (Attrition)", f"{report[True]['precision']:.2f}")
            col3.metric("Rappel (Attrition)", f"{report[True]['recall']:.2f}")
            
            # Importance des caract√©ristiques
            feature_importance = pd.DataFrame({
                'Caract√©ristique': [feature_names_fr[feat] for feat in clustering_features],
                'Importance': rf_model.feature_importances_
            }).sort_values('Importance', ascending=False)
            
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.barplot(x='Importance', y='Caract√©ristique', data=feature_importance, ax=ax)
            ax.set_title('Caract√©ristiques Contribuant √† la Pr√©diction d\'Attrition', fontsize=15)
            st.pyplot(fig)
    
    # Recommandations
    st.header("Recommandations pour les Utilisateurs")
    
    def generate_recommendations(user_data):
        recommendations = []
        
        # Pour les utilisateurs √† haute valeur
        if user_data['segment'] == 'Haute Valeur':
            if user_data['days_since_last_activity'] > 7:
                recommendations.append('R√©engager avec une newsletter personnalis√©e mettant en avant les derni√®res tendances en science des donn√©es')
            recommendations.append('Inviter √† devenir un leader communautaire ou contributeur de contenu')
            recommendations.append('Offrir un acc√®s anticip√© aux fonctionnalit√©s ou contenus premium')
        
        # Pour les utilisateurs √† risque
        elif user_data['segment'] == '√Ä Risque':
            if user_data['interaction_score'] < 0.3:
                recommendations.append('Envoyer un sondage de contenu interactif pour stimuler l\'engagement')
            recommendations.append('Email personnalis√© mettant en √©vidence le contenu populaire "manqu√©"')
            recommendations.append('Offre √† dur√©e limit√©e pour l\'essai de fonctionnalit√©s premium')
        
        # Pour les nouveaux utilisateurs / potentiels
        elif user_data['segment'] == 'Nouveau/Potentiel':
            recommendations.append('S√©rie de tutoriels sur les fonctionnalit√©s de la plateforme')
            recommendations.append('Recommandations de contenu bas√©es sur les mod√®les de navigation initiaux')
            recommendations.append('R√©compense d\'engagement pr√©coce (badge, reconnaissance)')
        
        # Pour les utilisateurs dormants
        else:  # Dormant
            recommendations.append('Campagne de r√©activation avec incitations')
            if user_data['days_since_last_activity'] < 90:
                recommendations.append('Sondage pour comprendre les raisons du d√©sengagement')
            else:
                recommendations.append('Offre sp√©ciale "Vous nous manquez" avec un r√©sum√© de contenu personnalis√©')
        
        return recommendations
    
    # Appliquer √† tous les utilisateurs
    user_engagement['recommandations'] = user_engagement.apply(generate_recommendations, axis=1)
    
    # Montrer des recommandations pour un utilisateur exemple
    st.subheader("Exemples de Recommandations pour les Utilisateurs")
    
    # Permettre la s√©lection d'un segment d'utilisateur √† afficher
    selected_segment = st.selectbox("S√©lectionner un Segment", 
                                   options=user_engagement['segment'].unique())
    
    # Montrer un utilisateur exemple de ce segment
    sample_user = user_engagement[user_engagement['segment'] == selected_segment].sample(1).iloc[0]
    
    # Afficher le profil utilisateur
    st.write("Profil de l'Utilisateur:")
    user_profile = {
        'ID Utilisateur': sample_user.name,
        'Segment': sample_user['segment'],
        'Cluster': sample_user['nom_cluster'],
        'Score de R√©cence': f"{sample_user['recency_score']:.2f}",
        'Score de Fr√©quence': f"{sample_user['frequency_score']:.2f}",
        'Score d\'Engagement': f"{sample_user['engagement_score']:.2f}",
        'Jours Depuis Derni√®re Activit√©': sample_user['days_since_last_activity']
    }
    
    # Afficher en deux colonnes
    col1, col2 = st.columns(2)
    for i, (key, value) in enumerate(user_profile.items()):
        if i % 2 == 0:
            col1.metric(key, value)
        else:
            col2.metric(key, value)
    
    # Afficher les recommandations
    st.write("Actions Recommand√©es:")
    for rec in sample_user['recommandations']:
        st.success(rec)
    
    # Fonctionnalit√© d'exportation
    st.header("Exporter les R√©sultats")
    
    export_columns = st.multiselect(
        "S√©lectionner les colonnes √† exporter",
        options=list(user_engagement.columns),
        default=['segment', 'cluster', 'nom_cluster', 'attrition', 'recommandations']
    )
    
    if st.button("G√©n√©rer l'Exportation"):
        export_df = user_engagement[['user_id'] + export_columns] if 'user_id' in user_engagement.columns else user_engagement[export_columns]
        
        # Pour la liste des recommandations, convertir en cha√Æne
        if 'recommandations' in export_df.columns:
            export_df['recommandations'] = export_df['recommandations'].apply(lambda x: '; '.join(x))
        
        # Renommer les colonnes en fran√ßais pour l'export
        rename_dict = {
            'cluster': 'cluster_id',
            'nom_cluster': 'cluster',
            'attrition': 'attrition',
            'recommandations': 'recommandations'
        }
        export_df = export_df.rename(columns={k: v for k, v in rename_dict.items() if k in export_df.columns})
        
        # Cr√©er un lien de t√©l√©chargement
        csv = export_df.to_csv(index=False)
        st.download_button(
            label="T√©l√©charger CSV",
            data=csv,
            file_name="analyse_engagement_utilisateurs.csv",
            mime="text/csv"
        )
else:
    st.error("Aucune donn√©e disponible. Veuillez t√©l√©charger un fichier CSV d'engagement utilisateur.")


# Ajouter cette section apr√®s la partie "Exporter les R√©sultats"

# Nouvelle section pour pr√©dire le segment utilisateur
st.header("Pr√©dire le Segment Utilisateur")
st.markdown("""
Cette section vous permet d'entrer les m√©triques d'engagement d'un utilisateur et de pr√©dire
son segment, son cluster, et d'obtenir des recommandations personnalis√©es.
""")

# Cr√©er un formulaire pour les entr√©es
with st.form(key='prediction_form'):
    col1, col2 = st.columns(2)
    
    with col1:
        recency_score = st.slider(
            "Score de R√©cence",
            min_value=0.0,
            max_value=1.0,
            value=0.5,
            step=0.01,
            help="Score indiquant la r√©cence des visites (1.0 = tr√®s r√©cent)"
        )
        
        frequency_score = st.slider(
            "Score de Fr√©quence",
            min_value=0.0,
            max_value=1.0,
            value=0.5,
            step=0.01,
            help="Score indiquant la fr√©quence des interactions (1.0 = tr√®s fr√©quent)"
        )
        
        loyalty_score = st.slider(
            "Score de Fid√©lit√©",
            min_value=0.0,
            max_value=1.0,
            value=0.5,
            step=0.01,
            help="Score indiquant la fid√©lit√© de l'utilisateur (1.0 = tr√®s fid√®le)"
        )
    
    with col2:
        interaction_score = st.slider(
            "Score d'Interaction",
            min_value=0.0,
            max_value=1.0,
            value=0.5,
            step=0.01,
            help="Score indiquant le niveau d'interaction de l'utilisateur (1.0 = tr√®s interactif)"
        )
        
        engagement_score = st.slider(
            "Score d'Engagement",
            min_value=0.0,
            max_value=1.0,
            value=0.5,
            step=0.01,
            help="Score global d'engagement (1.0 = tr√®s engag√©)"
        )
        
        days_since_last_activity = st.number_input(
            "Jours depuis la derni√®re activit√©",
            min_value=0,
            max_value=365,
            value=5,
            help="Nombre de jours √©coul√©s depuis la derni√®re activit√© de l'utilisateur"
        )
    
    submit_button = st.form_submit_button(label='Pr√©dire le Segment')

# Traitement lorsque le formulaire est soumis
if submit_button and user_engagement is not None:
    # Cr√©er un DataFrame pour l'utilisateur √† pr√©dire
    user_data = pd.DataFrame({
        'recency_score': [recency_score],
        'frequency_score': [frequency_score],
        'loyalty_score': [loyalty_score],
        'interaction_score': [interaction_score],
        'engagement_score': [engagement_score],
        'days_since_last_activity': [days_since_last_activity]
    })
    
    # D√©terminer le segment RFM
    if recency_score >= recency_threshold and frequency_score >= frequency_threshold:
        predicted_segment = 'Haute Valeur'
    elif recency_score < recency_threshold and frequency_score >= frequency_threshold:
        predicted_segment = '√Ä Risque'
    elif recency_score >= recency_threshold and frequency_score < frequency_threshold:
        predicted_segment = 'Nouveau/Potentiel'
    else:
        predicted_segment = 'Dormant'
    
    # Pr√©dire le cluster
    X_user = user_data[clustering_features].values
    X_user_scaled = scaler.transform(X_user)
    predicted_cluster = kmeans.predict(X_user_scaled)[0]
    cluster_name = cluster_mapping[predicted_cluster]
    
    # D√©terminer si l'utilisateur est √† risque d'attrition
    attrition_risk = days_since_last_activity > churn_days
    
    # G√©n√©rer les recommandations
    user_data['segment'] = predicted_segment
    recommendations = generate_recommendations(user_data.iloc[0])
    
    # Afficher les r√©sultats
    st.subheader("R√©sultats de la Pr√©diction")
    
    # Afficher les m√©triques principales
    col1, col2, col3 = st.columns(3)
    col1.metric("Segment Pr√©dit", predicted_segment)
    col2.metric("Cluster Pr√©dit", cluster_name)
    col3.metric("Risque d'Attrition", "√âlev√©" if attrition_risk else "Faible")
    
    # Afficher les recommandations
    st.subheader("Recommandations Personnalis√©es")
    for rec in recommendations:
        st.success(rec)
    
    # Visualiser la position de l'utilisateur sur le graphique de segmentation
    st.subheader("Visualisation de la Position de l'Utilisateur")
    
    # Recr√©er le graphique de segmentation avec le nouvel utilisateur
    fig, ax = plt.subplots(figsize=(10, 8))
    
    # Tracer les utilisateurs existants (en arri√®re-plan)
    sns.scatterplot(x='recency_score', y='frequency_score', hue='segment', 
                    data=user_engagement, palette='viridis', s=50, alpha=0.3, ax=ax)
    
    # Tracer le nouvel utilisateur (en √©vidence)
    ax.scatter(recency_score, frequency_score, color='red', s=200, marker='*', label='Utilisateur Pr√©dit')
    
    # Ajouter les lignes de quadrant
    ax.axvline(x=recency_threshold, color='gray', linestyle='--', alpha=0.5)
    ax.axhline(y=frequency_threshold, color='gray', linestyle='--', alpha=0.5)
    
    # Ajouter les √©tiquettes de segment
    ax.annotate('Haute Valeur', xy=(0.75, 0.75), xycoords='axes fraction', fontsize=14)
    ax.annotate('Nouveau/Potentiel', xy=(0.75, 0.25), xycoords='axes fraction', fontsize=14)
    ax.annotate('√Ä Risque', xy=(0.25, 0.75), xycoords='axes fraction', fontsize=14)
    ax.annotate('Dormant', xy=(0.25, 0.25), xycoords='axes fraction', fontsize=14)
    
    # Configuration du graphique
    ax.set_title('Position de l\'Utilisateur dans la Segmentation', fontsize=16)
    ax.set_xlabel('Score de R√©cence (plus √©lev√© = plus r√©cent)', fontsize=14)
    ax.set_ylabel('Score de Fr√©quence (plus √©lev√© = plus fr√©quent)', fontsize=14)
    ax.legend()
    
    st.pyplot(fig)
    
    # Visualiser la position dans l'espace des clusters (ACP)
    st.subheader("Position dans l'Espace des Clusters")
    
    # Transformer les donn√©es utilisateur avec PCA
    user_pca = pca.transform(X_user_scaled)
    
    # Cr√©er un graphique avec les clusters existants et le nouvel utilisateur
    fig, ax = plt.subplots(figsize=(12, 8))
    
    # Tracer les clusters existants
    scatter = ax.scatter(X_pca[:, 0], X_pca[:, 1], c=user_engagement['cluster'], 
                         cmap='viridis', s=50, alpha=0.3)
    
    # Tracer le nouvel utilisateur
    ax.scatter(user_pca[0, 0], user_pca[0, 1], color='red', s=200, marker='*', label='Utilisateur Pr√©dit')
    
    # Ajouter les centres des clusters et leurs noms
    for i, (x, y) in enumerate(cluster_centers_pca):
        ax.annotate(
            cluster_mapping[i], 
            (x, y),
            fontsize=12,
            ha='center',
            va='center',
            bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="gray", alpha=0.8)
        )
    
    # Configuration du graphique
    ax.set_title('Position de l\'Utilisateur dans l\'Espace des Clusters', fontsize=15)
    ax.set_xlabel('Composante Principale 1', fontsize=12)
    ax.set_ylabel('Composante Principale 2', fontsize=12)
    ax.legend()
    
    st.pyplot(fig)

# Pied de page
st.sidebar.markdown("---")
st.sidebar.info("""
**√Ä propos de cette application**  
Ce tableau de bord Streamlit analyse les donn√©es d'engagement des utilisateurs pour identifier 
les segments d'utilisateurs, pr√©dire l'attrition et g√©n√©rer des recommandations personnalis√©es.
""")